import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { fetchGroups, GroupWithMembers } from "@/lib/api/services/fetchGroup";

// ‚úÖ Hook: l·∫•y nh√≥m k√®m members
export function useClassGroupsWithMembers(classId: string) {
  const query = useQuery<GroupWithMembers[]>({
    queryKey: ["classGroupsWithMembers", classId],
    queryFn: () => fetchGroups.getByClassIdWithMembers(classId),
    enabled: !!classId,
    staleTime: 5 * 60 * 1000,
    retry: 1,
  });

  return {
    ...query,
    isLoading: query.isLoading,
    isError: query.isError,
  };
}
export function useCreateGroup() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (params: { classId: string; name: string; description: string }) =>
      fetchGroups.createGroup(params.classId, params.name, params.description),

    onSuccess: (_, variables) => {
      // ‚úÖ Refetch l·∫°i danh s√°ch nh√≥m c·ªßa l·ªõp v·ª´a t·∫°o
      queryClient.invalidateQueries({
        queryKey: ["classGroupsWithMembers", variables.classId],
      });
    },
  });
}
export function useUpdateGroup(classId: string) {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (params: { id: string; name: string; description: string }) =>
      fetchGroups.updateGroup(params.id, params.name, params.description),

    onSuccess: (_, variables) => {
      // ‚úÖ L√†m m·ªõi danh s√°ch nh√≥m c·ªßa l·ªõp
      queryClient.invalidateQueries({
        queryKey: ["classGroupsWithMembers", classId],
      });
    },
  });
}
export function useAddMembersToGroup(classId: string) {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (params: { groupId: string; userIds: string[] }) =>
      fetchGroups.addMembersToGroup(params.groupId, params.userIds),

    onSuccess: (_, variables) => {
      queryClient.invalidateQueries({
        queryKey: ["classGroupsWithMembers", classId],
      });
    },
  });
}
export function useRemoveMemberFromGroup(classId: string) {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (params: { groupId: string; userId: string }) =>
      fetchGroups.removeMemberFromGroup(params.groupId, params.userId),

    onSuccess: (_, variables) => {
      // ‚úÖ L√†m m·ªõi danh s√°ch nh√≥m k√®m th√†nh vi√™n c·ªßa l·ªõp
      queryClient.invalidateQueries({
        queryKey: ["classGroupsWithMembers", classId],
      });
    },
  });
}
export function useDeleteGroup(classId: string) {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (groupId: string) => fetchGroups.deleteGroup(groupId),

    onMutate: async (groupId: string) => {
      await queryClient.cancelQueries({ queryKey: ["classGroupsWithMembers", classId] });

      const previousData = queryClient.getQueryData<GroupWithMembers[]>(["classGroupsWithMembers", classId]);

      // ‚ö° C·∫≠p nh·∫≠t cache ngay l·∫≠p t·ª©c (·∫©n group b·ªã x√≥a)
      if (previousData) {
        queryClient.setQueryData<GroupWithMembers[]>(
          ["classGroupsWithMembers", classId],
          previousData.filter((g) => g.id !== groupId)
        );
      }

      return { previousData };
    },

    onError: (_err, _variables, context) => {
      // üîÑ Kh√¥i ph·ª•c n·∫øu l·ªói
      if (context?.previousData) {
        queryClient.setQueryData(["classGroupsWithMembers", classId], context.previousData);
      }
    },

    onSettled: () => {
      // üîÅ V·∫´n refetch ƒë·ªÉ ƒë·ªìng b·ªô tr·∫°ng th√°i v·ªõi server
      queryClient.invalidateQueries({
        queryKey: ["classGroupsWithMembers", classId],
      });
    },
  });
}
